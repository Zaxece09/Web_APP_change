import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, MenuButtonWebApp
from config import config
import re

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.bot_token)
dp = Dispatcher()

async def setup_menu_button():
    try:
        webapp_url = f"{config.webapp_url}?auto_fullscreen=true"
        web_app = WebAppInfo(url=webapp_url)
        menu_button = MenuButtonWebApp(text="üöÄ Crypto Exchange", web_app=web_app)
        
        await bot.set_chat_menu_button(menu_button=menu_button)
        logging.info("‚úÖ Menu Button –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Menu Button: {e}")

@dp.message(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    args = message.text.split()
    referral_code = None
    
    if len(args) > 1 and args[1].startswith('ref'):
        referral_code = args[1][3:]
        logging.info(f"User {user_id} started with referral code: {referral_code}")
    
    webapp_url = f"{config.webapp_url}?userid={user_id}&auto_fullscreen=true"
    if referral_code:
        webapp_url += f"&ref={referral_code}"
    
    web_app = WebAppInfo(url=webapp_url)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Crypto Exchange",
                    web_app=web_app
                )
            ]
        ]
    )
    
    if referral_code:
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Exchange!</b>

–ü—Ä–∏–≤–µ—Ç, {username}! üëã

–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! üéâ

<b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>
üí± –í—ã–≥–æ–¥–Ω—ã–µ –æ–±–º–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
üìä –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π  
üë§ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
üéÅ <b>–ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!</b>

<b>üéØ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:</b>
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
        """
    else:
        welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Exchange!</b>

–ü—Ä–∏–≤–µ—Ç, {username}! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–∏–π –æ–±–º–µ–Ω–Ω–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –°–ù–ì! 

<b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</b>
üí± –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±–º–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π  
üë§ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
üë• –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã

<b>üéØ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:</b>
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é üöÄ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
        """
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message(Command("ref"))
async def ref_command(message: types.Message):
    user_id = message.from_user.id
    
    webapp_url = f"{config.webapp_url}?userid={user_id}&page=referral"
    web_app = WebAppInfo(url=webapp_url)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É",
                    web_app=web_app
                )
            ]
        ]
    )
    
    await message.answer(
        "üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message()
async def echo(message: types.Message):
    await message.answer(
        "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Crypto Exchange!\n\n"
        "üì± –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.\n\n"
        "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ /ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
    )

async def main():
    try:
        await setup_menu_button()
        
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π...")
    print(f"Bot Token: {config.bot_token[:10]}...")
    print(f"WebApp URL: {config.webapp_url}")
    print("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("üñ•Ô∏è  –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (Bot API 8.0)")
    print("üöÄ  Menu Button –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    print("üì±  –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Safe Area Insets")
    print("üîí  –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
    print("üë•  –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("üéÅ  –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
    print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
    print("1. BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    print("2. WEBAPP_URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞—à ngrok URL")
    print("3. PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞")
    print("4. Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Bot API 8.0+")
    
    asyncio.run(main())