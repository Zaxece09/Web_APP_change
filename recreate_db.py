#!/usr/bin/env python3

import sys
import os
import logging
from sqlalchemy import text

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import engine, get_db
from models import Base, UserProfile, Trade, PromoCode, PromoCodeUsage

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def drop_all_tables():
    logger.info("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
    
    with engine.connect() as conn:
        tables_to_drop = [
            'promocode_usages',
            'promocodes', 
            'trades',
            'user_profiles'
        ]
        
        for table in tables_to_drop:
            try:
                conn.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        conn.commit()

def create_all_tables():
    logger.info("üî® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

def show_table_structure():
    logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
    
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """))
        
        tables = [row[0] for row in result]
        
        for table in tables:
            logger.info(f"\nüóÉÔ∏è  –¢–∞–±–ª–∏—Ü–∞: {table}")
            
            result = conn.execute(text(f"""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = '{table}'
                ORDER BY ordinal_position
            """))
            
            for row in result:
                column_name, data_type, is_nullable, default = row
                nullable = "NULL" if is_nullable == "YES" else "NOT NULL"
                default_str = f" DEFAULT {default}" if default else ""
                logger.info(f"   ‚Ä¢ {column_name}: {data_type} {nullable}{default_str}")

def main():
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        drop_all_tables()
        
        create_all_tables()
        
        show_table_structure()
        
        logger.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
        logger.info("\nüìù –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:")
        logger.info("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è Telegram –¥–∞–Ω–Ω—ã—Ö (username, first_name, last_name)")
        logger.info("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (referral_code, referred_by, referral_count)")
        logger.info("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_profile_completed –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        logger.info("   ‚Ä¢ –ü–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info("   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ address (–∞–¥—Ä–µ—Å)")
        logger.info("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –±–æ—Ç–∞: python bot.py") 
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–º—è –±–æ—Ç–∞ –≤ javascript/referal.js")
        print("4. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ config.py –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()